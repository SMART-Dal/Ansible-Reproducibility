Source: https://github.com/geerlingguy/ansible-role-php
File name: source-install.yml
Smell Category: Idempotency

- name: Confirm PHP configuration is correct.
  shell: php -i | grep 'memory_limit.*192'

Fixed version:
- name: Confirm PHP configuration is correct
  shell: php -i | grep 'memory_limit.*192'
  ignore_errors: yes
  register: php_memory_limit_check
  changed_when: false

- name: Set PHP memory_limit if it's not correct
  shell: php -i | grep 'memory_limit.*192' || echo "memory_limit = 192M" >> /path/to/php.ini
  when: php_memory_limit_check.rc != 0
  become: true


Source: https://github.com/geerlingguy/ansible-role-apache
File name: configure-RedHat.yml
Smell Category: Idempotency

- name: Ensure httpd certs are installed (RHEL 8 and later).
  command: /usr/libexec/httpd-ssl-gencerts
  when:
    - ansible_distribution_major_version | int >= 8
    - not localhost_cert.stat.exists

Fixed version:
- name: Ensure httpd certs are installed (RHEL 8 and later)
  command: /usr/libexec/httpd-ssl-gencerts
  when:
    - ansible_distribution_major_version | int >= 8
    - not localhost_cert.stat.exists
  register: httpd_certs_result
  changed_when: httpd_certs_result.rc == 0


Source: https://github.com/cchurch/ansible-role-virtualenv
File name: update.yml
Smell Category: Version specific installation

- name: install virtualenv pre packages
  pip:
    name: "{{ item.name | default(item, true) }}"
    version: "{{ item.version | default(omit, true) }}"
    virtualenv: "{{ _virtualenv_path }}"
  with_items: "{{ virtualenv_pre_packages }}"
  notify: "{{ virtualenv_notify_on_updated | default('virtualenv updated', true) }}"

Fixed version:
- name: Install or update virtualenv pre packages
  pip:
    name: "{{ item.name | default(item, true) }}"
    virtualenv: "{{ _virtualenv_path }}"
    state: latest
  with_items: "{{ virtualenv_pre_packages }}"
  notify: "{{ virtualenv_notify_on_updated | default('virtualenv updated', true) }}"


Source: https://github.com/cchurch/ansible-role-virtualenv
File name: update.yml
Smell Category: Outdated dependency

- name: install virtualenv post packages
  pip:
    name: "{{ item.name | default(item, true) }}"
    version: "{{ item.version | default(omit, true) }}"
    virtualenv: "{{ _virtualenv_path }}"
  with_items: "{{ virtualenv_post_packages }}"

Fixed version:
- name: Install virtualenv post packages
  pip:
    name: "{{ item.name | default(item, true) }}"
    virtualenv: "{{ _virtualenv_path }}"
    state: present
  with_items: "{{ virtualenv_post_packages }}"
  notify: "{{ virtualenv_notify_on_updated | default('virtualenv updated', true) }}"


Source: https://github.com/Icinga/ansible-collection-icinga/tree/main
File name: prepare.yml
Smell Category: Missing dependency

- name: create systemd icinga2.service.d dir
  file:
    path: /etc/systemd/system/icinga2.service.d
    owner: root
    group: root
    mode: "0755"

Fixed version:
- name: Ensure systemd icinga2.service.d directory is present
  ansible.builtin.file:
    path: /etc/systemd/system/icinga2.service.d
    owner: root
    group: root
    mode: "0755"
    state: directory
    assert:
    that:
      - 'systemd' in ansible_system"
    fail_msg: "This task requires systemd, but the system is not using systemd."
  register: icinga2_service_d_result

- name: Handle the directory if it wasn't present
  debug:
    msg: "Directory /etc/systemd/system/icinga2.service.d was not present. Handle it here."
  when: icinga2_service_d_result.failed


Source: https://github.com/chocolatey/chocolatey-ansible/blob/9bdc0d40437a7dc7f0181af42da7e35bbcfcae4a/chocolatey/tests/integration/targets/win_chocolatey/tasks/bootstrap_tests.yml#L4
File name: bootstrap_tests.yml
Smell Category: Assumption about environment

- name: checking if the bootstrap file has been created
  win_shell: Get-Content -Path "C:/temp/confirm-bootstrap.txt" -Raw
  register: bootstrap_file_check

Fixed version:
- name: Checking if the bootstrap file has been created
  tasks:
    - name: Check if the environment is Windows
      stat:
        path: "C:/temp/confirm-bootstrap.txt"
      register: bootstrap_file_check
      ignore_errors: yes
      when: ansible_os_family == 'Windows'

    - name: Print file contents if it exists
      debug:
        var: bootstrap_file_check
      when: bootstrap_file_check.stat.exists == true

Source: https://github.com/aplatform64/aplatform64
File name: hw_gpu_amd.yml
Smell Category: Hardware specific command

  tasks:
    - name: "Example: Install AMD GPU drivers"
      vars:
        hw_gpu_amd:
          resolve_prereq: true
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.hardware.hw_gpu_amd"

Fixed version:
- name: Install AMD GPU drivers (with handling)
  block:
    - name: Check if AMD GPU information exists
      fail:
        msg: "AMD GPU information (hw_gpu_amd) is missing."
      when: hw_gpu_amd is undefined

    - name: Install AMD GPU drivers
      vars:
        hw_gpu_amd:
          resolve_prereq: true
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.hardware.hw_gpu_amd"
  rescue:
    - name: Handle missing GPU information
      debug:
        msg: "Skipping GPU driver installation due to missing AMD GPU information (hw_gpu_amd)."
  when: hw_gpu_amd is defined


Source: https://gitlab.com/idris-cnrs/jupyter/ansible-jupyterhub-hpc
File name: tokens.yml
Smell category: Broken dependency chain

- name: install CHP proxy auth token
  copy:
    src: "{{ local_tokens_dir }}/proxy_auth_token"
    dest: "{{ jupyterhub_srv_dir }}/proxy_auth_token"
    owner: "{{ jupyterhub_system_user }}"
    group: "{{ jupyterhub_system_group }}"
    mode: 0600
  become: true

Fixed version:
- name: install CHP proxy auth token
  copy:
    src: "{{ local_tokens_dir }}/proxy_auth_token"
    dest: "{{ jupyterhub_srv_dir }}/proxy_auth_token"
    owner: "{{ jupyterhub_system_user }}"
    group: "{{ jupyterhub_system_group }}"
    mode: 0600
  become: true
    stat:
        path: "{{ local_tokens_dir }}/proxy_auth_token"
  register: src_file_stat
 when: proxy_auth_token_stat.stat.exists == false or
 ansible.utils.file_checksum(src) != ansible.utils.file_checksum(dest)
 and src_file_stat.stat.exists


Source: https://github.com/linuxfabrik/lfops
File name: perl.yml
Smell category: Broken dependency chain

- name: determine which Java version is installed
  shell: |
    set -o pipefail |
    java -version 2>&1 |
    head -n 1 |
    awk '{ print $3 }' |
    awk -F '"' '{ print $2 }'
  register: oracle_java_task_version
  when: oracle_java_installed

Fixed version:
  - name: Determine which Java version is installed
  shell: |
    set -o pipefail
    java -version 2>&1 | head -n 1 | awk '{ print $3 }' | awk -F '"' '{ print $2 }'
  register: oracle_java_task_version
  assert:
    that:
      - oracle_java_task_version.stdout is defined
    fail_msg: "Failed to determine the Java version."
  when: oracle_java_installed
  ignore_errors: yes


Source: https://github.com/ansible-collections/google.cloud/tree/master
File name: archive_install.yml
Smell category: Broken dependency chain
- name: Gcloud | Archive | Link binaries to /usr/bin (like package install)
  ansible.builtin.file:
    src: "{{ gcloud_library_path }}/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
  loop:
    - bq
    - docker-credential-gcloud
    - gcloud
    - git-credential-gcloud.sh
    - gsutil
  when: not gcloud_install_script

Fixed version:
- name: Gcloud | Archive | Link binaries to /usr/bin (like package install)
  ansible.builtin.file:
    src: "{{ gcloud_library_path }}/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
  assert:
    that:
      - item.stat.islnk
    fail_msg: "Failed to create the symbolic link for /usr/bin/{{ item.item }}"
  loop:
    - bq
    - docker-credential-gcloud
    - gcloud
    - git-credential-gcloud.sh
    - gsutil
  when: not gcloud_install_script