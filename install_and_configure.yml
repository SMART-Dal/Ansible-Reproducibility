---
- hosts: localhost
  gather_facts: false

  tasks:
    - name: Download apt key
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /tmp # or /etc/pki/rpm-gpg depending on the infrastructure

    - name: Add a key from a file
      ansible.builtin.apt_key:
        file: /tmp/apt-key.gpg
        state: present

    - name: Update the apt package index
      tags: experiment
      become: yes
      apt:
        name: "*"
        state: latest
        update_cache: yes
        force_apt_get: yes

    - name: install required modules
      tags: experiment
      become: true
      apt:
        name: ['git', 'apt-transport-https', 'ca-certificates', 'wget', 'software-properties-common', 'gnupg2', 'curl', 'make', 'gcc', 'autoconf', 'automake', 'libtool', 'g++', 'protobuf-compiler', 'python3-pip']

    - name: Install Pillow for Python3
      tags: experiment
      pip:
        name: Pillow
        executable: pip3

    - name: Install TensorFlow for Python3
      tags: experiment
      pip:
        name: TensorFlow
        executable: pip3

    - name: Install pycocotools for Python3
      tags: experiment
      pip:
        name: pycocotools
        executable: pip3

    - name: Install pandas for Python3
      tags: experiment
      pip:
        name: pandas
        executable: pip3

    - name: enable sudoless invocation for perf
      tags: experiment
      become: true
      shell: |
        sh -c echo -1 >/proc/sys/kernel/perf_event_paranoid
        sysctl -w kernel.perf_event_paranoid=-1

    - name: add apt signing key from official docker repo
      tags: experiment
      become: true
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: add docker official repository for Debian Stretch
      tags: experiment
      become: true
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/debian stretch stable
        state: present

    - name: Index new repo into the cache
      tags: experiment
      become: yes
      apt:
        name: "*"
        state: latest
        update_cache: yes
        force_apt_get: yes

    - name: install docker
      tags: experiment
      become: true
      apt:
        name: "docker-ce"
        state: latest

    - name: ensure docker deamon is running
      tags: experiment
      become: yes
      service:
        name: docker
        state: started

    - name: add user to docker group
      tags: experiment
      become: yes
      shell: |
        groupadd docker
        usermod -aG docker {{ user }}
    - name: define variable for nvidia-docker
      tags: experiment
      stat:
        path: ./nvidia-docker
      register: nvidiadocker

    - name: clone and install nvidia-docker
      tags: experiment
      when: not nvidiadocker.stat.exists
      become: true
      become_user: "{{ user }}"
      shell: |
        distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
              && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
              && curl -s -L https://nvidia.github.io/libnvidia-container/experimental/$distribution/libnvidia-container.list | \
                 sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
                 sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
        cd nvidia-docker
        make

    - name: define variable for DeepLearningExamples
      tags: experiment
      stat:
        path: ./DeepLearningExamples
      register: deep_learning_examples

    - name: clone repo DeepLearningExamples
      tags: experiment
      when: not deep_learning_examples.stat.exists
      become: true
      become_user: "{{ user }}"
      shell: git clone https://github.com/NVIDIA/DeepLearningExamples.git

    # Build and configure NCF (Pytroch)
    - name: download data-set and build docker image for Pytorch's NCF
      tags: experiment
      become: true
      become_user: "{{ user }}"
      shell: |
        cp configs/pytorch_ncf_to_be_renamed_as_ncf.py DeepLearningExamples/PyTorch/Recommendation/NCF/ncf.py
        cd DeepLearningExamples/PyTorch/Recommendation/NCF
        rm -rf data || echo data dir not found
        curl http://files.grouplens.org/datasets/movielens/ml-20m.zip --output ./data/ml-20m.zip && ./prepare_dataset.sh ml-20m data
      register: ncf_pytorch_output

    - debug:
        msg: "{{ ncf_pytorch_output.stdout_lines|list }}"
      tags: experiment

    # Build and configure NCF (TensorFlow)
    - name: download data-set and build docker image for TensorFlow's NCF
      tags: experiment
      become: true
      become_user: "{{ user }}"
      shell: |
        cp configs/tensorflow_ncf_to_be_renamed_as_ncf.py DeepLearningExamples/TensorFlow/Recommendation/NCF/ncf.py
        cd DeepLearningExamples/TensorFlow/Recommendation/NCF
        rm -rf data || echo data dir not ounf
        mkdir data
        curl http://files.grouplens.org/datasets/movielens/ml-20m.zip --output ./data/ml-20m.zip && ./prepare_dataset.sh ml-20m data
      register: ncf_tensorflow_output

    - debug:
        msg: "{{ ncf_tensorflow_output.stdout_lines|list }}"
      tags: experiment